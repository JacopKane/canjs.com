c({"name": "can.Observe.prototype.bind", "type": "function", "parent": "can.Observe.prototype", "body": "", "description": "<p>Bind event handlers to an Observe. </p>", "title": "bind", "signatures": [{"code": "bind(eventType, handler)", "description": "", "params": [{"types": [{"type": "String"}], "name": "eventType", "description": "<p>the type of event to bind this handler to</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "handler", "description": "<p>the handler to be called when this type of event fires\nThe signature of the handler depends on the type of event being bound. See below\nfor details.</p>"}, {"types": [{"type": "Event"}], "name": "ev", "description": "<p>the event object</p>"}, {"types": [{"type": "String"}], "name": "attr", "description": "<p>which property changed</p>"}, {"types": [{"type": "String"}], "name": "how", "description": "<p>whether the property was added, removed, or set\nPossible values are <code>'add'</code>, <code>'remove'</code>, or <code>'set'</code>.</p>"}, {"types": [{"type": "*"}], "name": "newVal", "description": "<p>the value of the property after the change\n<code>newVal</code> will be <code>undefined</code> if the property was removed.</p>"}, {"types": [{"type": "*"}], "name": "oldVal", "description": "<p>the value of the property before the change\n<code>oldVal</code> will be <code>undefined</code> if the property was added.</p>\n\n<p>Here is a concrete tour through the <em>change</em> event handler's arguments:</p>\n\n<pre>var o = new can.Observe({});\no.bind('change', function(ev, attr, how, newVal, oldVal) {\n    console.log(ev + ', ' + attr + ', ' + how + ', ' + newVal + ', ' + oldVal);\n});\n\no.attr('a', 'Alexis'); // [object Object], a, add, Alexis, undefined\no.attr('a', 'Adam');   // [object Object], a, set, Adam, Alexis\no.attr({\n    'a': 'Alice',      // [object Object], a, set, Alice, Adam\n    'b': 'Bob'         // [object Object], b, add, Bob, undefined\n});\no.removeAttr('a');     // [object Object], a, remove, undefined, Alice</pre>\n\n<p>(See also <code>[can.Observe::removeAttr|removeAttr]</code>, which removes properties).</p>\n\n<h2>The <em>property name</em> event</h2>\n\n<p>The second event that is fired is an event whose type is the same as the changed\nproperty's name. This event is useful for noticing changes to a specific property.</p>\n\n<pre>var o = new can.Observe({});\no.bind('a', function(ev, newVal, oldVal) {\n    console.log('The value of a changed.');\n});</pre>\n\n<p>The parameters of the event handler for the <em>property name</em> event are:</p>"}, {"types": [{"type": "Event"}], "name": "ev", "description": "<p>the event object</p>"}, {"types": [{"type": "*"}], "name": "newVal", "description": "<p>the value of the property after the change\n<code>newVal</code> will be <code>undefined</code> if the property was removed.</p>"}, {"types": [{"type": "*"}], "name": "oldVal", "description": "<p>the value of the property before the change\n<code>oldVal</code> will be <code>undefined</code> if the property was added.</p>\n\n<p>Here is a concrete tour through the <em>property name</em> event handler's arguments:</p>\n\n<pre>var o = new can.Observe({});\no.bind('a', function(ev, newVal, oldVal) {\n    console.log(ev + ', ' + newVal + ', ' + oldVal);\n});\n\no.attr('a', 'Alexis'); // [object Object], Alexis, undefined\no.attr('a', 'Adam');   // [object Object], Adam, Alexis\no.attr({\n    'a': 'Alice',      // [object Object], Alice, Adam\n    'b': 'Bob' \n});\no.removeAttr('a');     // [object Object], undefined, Alice</pre>\n\n<h2>See also</h2>\n\n<p>More information about changing properties on Observes can be found under\n[can.Observe.prototype.attr attr].</p>\n\n<p>For a more specific way to changes on Observes, see the [can.Observe.delegate] plugin.</p>"}], "returns": {"types": [{"type": "can.Observe"}], "description": "<p>this Observe, for chaining</p>\n\n<p><code>bind</code> binds event handlers to property changes on <code>can.Observe</code>s. When you change\na property using <code>attr</code>, two events are fired on the Observe, allowing other parts\nof your application to observe the changes to the object.</p>\n\n<h2>The <em>change</em> event</h2>\n\n<p>The first event that is fired is the <em>change</em> event. The <em>change</em> event is useful\nif you want to react to all changes on an Observe.</p>\n\n<pre>var o = new can.Observe({});\no.bind('change', function(ev, attr, how, newVal, oldVal) {\n    console.log('Something changed.');\n});</pre>\n\n<p>The parameters of the event handler for the <em>change</em> event are:</p>"}}], "src": "can/observe/observe.js", "line": 706})