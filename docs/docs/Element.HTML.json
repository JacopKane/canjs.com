c({"name": "Element.HTML", "type": "property", "parent": "Element", "body": "", "description": "<p>'\n            },\n            async: true,\n            format: false,\n            method: 'post',\n            link: 'ignore',\n            isSuccess: null,\n            emulation: true,\n            urlEncoded: true,\n            encoding: 'utf-8',\n            evalScripts: false,\n            evalResponse: false,\n            timeout: 0,\n            noCache: false\n        },</p>\n\n<pre><code>    initialize: function(options){\n        this.xhr = new Browser.Request();\n        this.setOptions(options);\n        this.headers = this.options.headers;\n    },\n\n    onStateChange: function(){\n        var xhr = this.xhr;\n        if (xhr.readyState != 4 || !this.running) return;\n        this.running = false;\n        this.status = 0;\n        Function.attempt(function(){\n            var status = xhr.status;\n            this.status = (status == 1223) ? 204 : status;\n        }.bind(this));\n        xhr.onreadystatechange = empty;\n        if (progressSupport) xhr.onprogress = xhr.onloadstart = empty;\n        clearTimeout(this.timer);\n\n        this.response = {text: this.xhr.responseText || '', xml: this.xhr.responseXML};\n        if (this.options.isSuccess.call(this, this.status))\n            this.success(this.response.text, this.response.xml);\n        else\n            this.failure();\n    },\n\n    isSuccess: function(){\n        var status = this.status;\n        return (status &gt;= 200 &amp;&amp; status &lt; 300);\n    },\n\n    isRunning: function(){\n        return !!this.running;\n    },\n\n    processScripts: function(text){\n        if (this.options.evalResponse || (/(ecma|java)script/).test(this.getHeader('Content-type'))) return Browser.exec(text);\n        return text.stripScripts(this.options.evalScripts);\n    },\n\n    success: function(text, xml){\n        this.onSuccess(this.processScripts(text), xml);\n    },\n\n    onSuccess: function(){\n        this.fireEvent('complete', arguments).fireEvent('success', arguments).callChain();\n    },\n\n    failure: function(){\n        this.onFailure();\n    },\n\n    onFailure: function(){\n        this.fireEvent('complete').fireEvent('failure', this.xhr);\n    },\n\n    loadstart: function(event){\n        this.fireEvent('loadstart', [event, this.xhr]);\n    },\n\n    progress: function(event){\n        this.fireEvent('progress', [event, this.xhr]);\n    },\n\n    timeout: function(){\n        this.fireEvent('timeout', this.xhr);\n    },\n\n    setHeader: function(name, value){\n        this.headers[name] = value;\n        return this;\n    },\n\n    getHeader: function(name){\n        return Function.attempt(function(){\n            return this.xhr.getResponseHeader(name);\n        }.bind(this));\n    },\n\n    check: function(){\n        if (!this.running) return true;\n        switch (this.options.link){\n            case 'cancel': this.cancel(); return true;\n            case 'chain': this.chain(this.caller.pass(arguments, this)); return false;\n        }\n        return false;\n    },\n\n    send: function(options){\n        if (!this.check(options)) return this;\n\n        this.options.isSuccess = this.options.isSuccess || this.isSuccess;\n        this.running = true;\n\n        var type = typeOf(options);\n        if (type == 'string' || type == 'element') options = {data: options};\n\n        var old = this.options;\n        options = Object.append({data: old.data, url: old.url, method: old.method}, options);\n        var data = options.data, url = String(options.url), method = options.method.toLowerCase();\n\n        switch (typeOf(data)){\n            case 'element': data = document.id(data).toQueryString(); break;\n            case 'object': case 'hash': data = Object.toQueryString(data);\n        }\n\n        if (this.options.format){\n            var format = 'format=' + this.options.format;\n            data = (data) ? format + '&amp;' + data : format;\n        }\n\n        if (this.options.emulation &amp;&amp; !['get', 'post'].contains(method)){\n            var _method = '_method=' + method;\n            data = (data) ? _method + '&amp;' + data : _method;\n            method = 'post';\n        }\n\n        if (this.options.urlEncoded &amp;&amp; ['post', 'put'].contains(method)){\n            var encoding = (this.options.encoding) ? '; charset=' + this.options.encoding : '';\n            this.headers['Content-type'] = 'application/x-www-form-urlencoded' + encoding;\n        }\n\n        if (!url) url = document.location.pathname;\n\n        var trimPosition = url.lastIndexOf('/');\n        if (trimPosition &gt; -1 &amp;&amp; (trimPosition = url.indexOf('#')) &gt; -1) url = url.substr(0, trimPosition);\n\n        if (this.options.noCache)\n            url += (url.contains('?') ? '&amp;' : '?') + String.uniqueID();\n\n        if (data &amp;&amp; method == 'get'){\n            url += (url.contains('?') ? '&amp;' : '?') + data;\n            data = null;\n        }\n\n        var xhr = this.xhr;\n        if (progressSupport){\n            xhr.onloadstart = this.loadstart.bind(this);\n            xhr.onprogress = this.progress.bind(this);\n        }\n\n        xhr.open(method.toUpperCase(), url, this.options.async, this.options.user, this.options.password);\n        if (this.options.user &amp;&amp; 'withCredentials' in xhr) xhr.withCredentials = true;\n\n        xhr.onreadystatechange = this.onStateChange.bind(this);\n\n        Object.each(this.headers, function(value, key){\n            try {\n                xhr.setRequestHeader(key, value);\n            } catch (e){\n                this.fireEvent('exception', [key, value]);\n            }\n        }, this);\n\n        this.fireEvent('request');\n        xhr.send(data);\n        if (!this.options.async) this.onStateChange();\n        else if (this.options.timeout) this.timer = this.timeout.delay(this.options.timeout, this);\n        return this;\n    },\n\n    cancel: function(){\n        if (!this.running) return this;\n        this.running = false;\n        var xhr = this.xhr;\n        xhr.abort();\n        clearTimeout(this.timer);\n        xhr.onreadystatechange = empty;\n        if (progressSupport) xhr.onprogress = xhr.onloadstart = empty;\n        this.xhr = new Browser.Request();\n        this.fireEvent('cancel');\n        return this;\n    }\n\n});\n\nvar methods = {};\n['get', 'post', 'put', 'delete', 'GET', 'POST', 'PUT', 'DELETE'].each(function(method){\n    methods[method] = function(data){\n        var object = {\n            method: method\n        };\n        if (data != null) object.data = data;\n        return this.send(object);\n    };\n});\n\nRequest.implement(methods);\n\nElement.Properties.send = {\n\n    set: function(options){\n        var send = this.get('send').cancel();\n        send.setOptions(options);\n        return this;\n    },\n\n    get: function(){\n        var send = this.retrieve('send');\n        if (!send){\n            send = new Request({\n                data: this, link: 'cancel', method: this.get('method') || 'post', url: this.get('action')\n            });\n            this.store('send', send);\n        }\n        return send;\n    }\n\n};\n\nElement.implement({\n\n    send: function(url){\n        var sender = this.get('send');\n        sender.send({data: this, url: url || sender.options.url});\n        return this;\n    }\n\n});\n</code></pre>\n\n<p>})();</p>\n\n<p>/*</p>\n\n<hr />\n\n<p>name: Request.HTML</p>\n\n<p>description: Extends the basic Request Class with additional methods for interacting with HTML responses.</p>\n\n<p>license: MIT-style license.</p>\n\n<p>requires: [Element, Request]</p>\n\n<p>provides: Request.HTML</p>\n\n<p>...</p>", "src": "can/lib/mootools-core-1.4.3.js", "line": 5152})