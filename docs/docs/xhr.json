c({"type": "function", "name": "xhr", "params": [{"types": [{"type": "Object"}], "optional": true, "name": "xhr", "description": "<p>properties that you want to overwrite</p>"}], "parent": "can/util/fixture/fixture.js", "body": "", "description": "<p>Use can.fixture.xhr to create an object that looks like an xhr object.</p>\n\n<h2>Example</h2>\n\n<p>The following example shows how the -restCreate fixture uses xhr to return\na simulated xhr object:</p>\n\n<pre>\"-restCreate\" : function( settings, cbType ) {\n  switch(cbType){\n    case \"success\":\n      return [\n        {id: parseInt(Math.random()*1000)},\n        \"success\",\n        can.fixture.xhr()];\n    case \"complete\":\n      return [\n        can.fixture.xhr({\n          getResponseHeader: function() { \n            return settings.url+\"/\"+parseInt(Math.random()*1000);\n          }\n        }),\n        \"success\"];\n  }\n}</pre>", "hide": true, "returns": {"types": [{"type": "Object"}], "description": "<p>an object that looks like a successful XHR object.</p>"}, "src": "can/util/fixture/fixture.js", "line": 873})