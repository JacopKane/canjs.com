c({"type": "function", "name": "Y.EventHandle.fire", "params": [{"name": "type", "description": "<p>{String|Object} The type of the event, or an object that contains\na 'type' property.</p>"}, {"name": "arguments", "description": "<p>{Object*} an arbitrary set of parameters to pass to\nthe handler.  If the first of these is an object literal and the event is\nconfigured to emit an event facade, the event facade will replace that\nparameter after the properties the object literal contains are copied to\nthe event facade.</p>"}], "parent": "Y.EventHandle", "body": "", "description": "<p>Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the\nfollowing parameters.</p>\n\n<p>If the custom event object hasn't been created, then the event hasn't\nbeen published and it has no subscribers.  For performance sake, we\nimmediate exit in this case.  This means the event won't bubble, so\nif the intention is that a bubble target be notified, the event must\nbe published on this object first.</p>\n\n<p>The first argument is the event type, and any additional arguments are\npassed to the listeners as parameters.  If the first of these is an\nobject literal, and the event is configured to emit an event facade,\nthat object is mixed into the event facade and the facade is provided\nin place of the original object.</p>", "comment": "undefined@method fire\n", "returns": {"types": [{"type": "EventTarget"}], "description": "<p>the event host</p>"}, "src": "can/lib/yui-3.7.3.js", "line": 8138})