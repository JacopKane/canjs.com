c({"name": "dojo._ioSetArgs", "type": "constructor", "body": "", "description": "<p>=====</p>\n\n<pre><code>         // kwargs function parameter definitions.   Assigning to dojo namespace rather than making them local variables\n         // because they are used by dojo/io modules too\n\n         dojo.__IoArgs = declare(null, {\n         // url: String\n         //        URL to server endpoint.\n         // content: Object?\n         //        Contains properties with string values. These\n         //        properties will be serialized as name1=value2 and\n         //        passed in the request.\n         // timeout: Integer?\n         //        Milliseconds to wait for the response. If this time\n         //        passes, the then error callbacks are called.\n         // form: DOMNode?\n         //        DOM node for a form. Used to extract the form values\n         //        and send to the server.\n         // preventCache: Boolean?\n         //        Default is false. If true, then a\n         //        \"dojo.preventCache\" parameter is sent in the request\n         //        with a value that changes with each request\n         //        (timestamp). Useful only with GET-type requests.\n         // handleAs: String?\n         //        Acceptable values depend on the type of IO\n         //        transport (see specific IO calls for more information).\n         // rawBody: String?\n         //        Sets the raw body for an HTTP request. If this is used, then the content\n         //        property is ignored. This is mostly useful for HTTP methods that have\n         //        a body to their requests, like PUT or POST. This property can be used instead\n         //        of postData and putData for dojo/_base/xhr.rawXhrPost and dojo/_base/xhr.rawXhrPut respectively.\n         // ioPublish: Boolean?\n         //        Set this explicitly to false to prevent publishing of topics related to\n         //        IO operations. Otherwise, if djConfig.ioPublish is set to true, topics\n         //        will be published via dojo/topic.publish() for different phases of an IO operation.\n         //        See dojo/main.__IoPublish for a list of topics that are published.\n\n         load: function(response, ioArgs){\n         // summary:\n         //        This function will be\n         //        called on a successful HTTP response code.\n         // ioArgs: dojo/main.__IoCallbackArgs\n         //        Provides additional information about the request.\n         // response: Object\n         //        The response in the format as defined with handleAs.\n         },\n\n         error: function(response, ioArgs){\n         // summary:\n         //        This function will\n         //        be called when the request fails due to a network or server error, the url\n         //        is invalid, etc. It will also be called if the load or handle callback throws an\n         //        exception, unless djConfig.debugAtAllCosts is true.  This allows deployed applications\n         //        to continue to run even when a logic error happens in the callback, while making\n         //        it easier to troubleshoot while in debug mode.\n         // ioArgs: dojo/main.__IoCallbackArgs\n         //        Provides additional information about the request.\n         // response: Object\n         //        The response in the format as defined with handleAs.\n         },\n\n         handle: function(loadOrError, response, ioArgs){\n         // summary:\n         //        This function will\n         //        be called at the end of every request, whether or not an error occurs.\n         // loadOrError: String\n         //        Provides a string that tells you whether this function\n         //        was called because of success (load) or failure (error).\n         // response: Object\n         //        The response in the format as defined with handleAs.\n         // ioArgs: dojo/main.__IoCallbackArgs\n         //        Provides additional information about the request.\n         }\n         });\n\n         dojo.__IoCallbackArgs = declare(null, {\n         // args: Object\n         //        the original object argument to the IO call.\n         // xhr: XMLHttpRequest\n         //        For XMLHttpRequest calls only, the\n         //        XMLHttpRequest object that was used for the\n         //        request.\n         // url: String\n         //        The final URL used for the call. Many times it\n         //        will be different than the original args.url\n         //        value.\n         // query: String\n         //        For non-GET requests, the\n         //        name1=value1&amp;name2=value2 parameters sent up in\n         //        the request.\n         // handleAs: String\n         //        The final indicator on how the response will be\n         //        handled.\n         // id: String\n         //        For dojo/io/script calls only, the internal\n         //        script ID used for the request.\n         // canDelete: Boolean\n         //        For dojo/io/script calls only, indicates\n         //        whether the script tag that represents the\n         //        request can be deleted after callbacks have\n         //        been called. Used internally to know when\n         //        cleanup can happen on JSONP-type requests.\n         // json: Object\n         //        For dojo/io/script calls only: holds the JSON\n         //        response for JSONP-type requests. Used\n         //        internally to hold on to the JSON responses.\n         //        You should not need to access it directly --\n         //        the same object should be passed to the success\n         //        callbacks directly.\n         });\n\n         dojo.__IoPublish = declare(null, {\n         // summary:\n         //        This is a list of IO topics that can be published\n         //        if djConfig.ioPublish is set to true. IO topics can be\n         //        published for any Input/Output, network operation. So,\n         //        dojo.xhr, dojo.io.script and dojo.io.iframe can all\n         //        trigger these topics to be published.\n         // start: String\n         //        \"/dojo/io/start\" is sent when there are no outstanding IO\n         //        requests, and a new IO request is started. No arguments\n         //        are passed with this topic.\n         // send: String\n         //        \"/dojo/io/send\" is sent whenever a new IO request is started.\n         //        It passes the dojo.Deferred for the request with the topic.\n         // load: String\n         //        \"/dojo/io/load\" is sent whenever an IO request has loaded\n         //        successfully. It passes the response and the dojo.Deferred\n         //        for the request with the topic.\n         // error: String\n         //        \"/dojo/io/error\" is sent whenever an IO request has errored.\n         //        It passes the error and the dojo.Deferred\n         //        for the request with the topic.\n         // done: String\n         //        \"/dojo/io/done\" is sent whenever an IO request has completed,\n         //        either by loading or by erroring. It passes the error and\n         //        the dojo.Deferred for the request with the topic.\n         // stop: String\n         //        \"/dojo/io/stop\" is sent when all outstanding IO requests have\n         //        finished. No arguments are passed with this topic.\n         });\n         =====\n</code></pre>", "src": "can/util/dojo/dojo-1.8.1.js", "line": 13248})