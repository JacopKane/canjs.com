c({"type": "function", "name": "unbind", "parent": "can.Observe.prototype", "body": "", "description": "<p>Unbind event handlers from an Observe. </p>", "title": "", "signatures": [{"code": "unbind(eventType[, handler])", "description": "", "params": [{"types": [{"type": "String"}], "name": "eventType", "description": "<p>the type of event to unbind, exactly as passed to <code>bind</code></p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "optional": true, "name": "handler", "description": "<p>the handler to unbind</p>\n\n<p><code>unbind</code> unbinds event handlers previously bound with [can.Observe.prototype.bind|<code>bind</code>].\nIf no <em>handler</em> is passed, all handlers for the given event type will be unbound.</p>\n\n<pre>var i = 0,\n    increaseBy2 = function() { i += 2; },\n    increaseBy3 = function() { i += 3; },\n    o = new can.Observe();\n\no.bind('change', increaseBy2);\no.bind('change', increaseBy3);\no.attr('a', 'Alice');\ni; // 5\n\no.unbind('change', increaseBy2);\no.attr('b', 'Bob');\ni; // 8\n\no.unbind('change');\no.attr('e', 'Eve');\ni; // 8</pre>"}]}], "comment": " ", "src": "can/model/model.js", "line": 1070})