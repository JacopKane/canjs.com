c({"body": "<p><code>can.addClass( nodelist, className )</code> adds the specified class(es) to\nnodelist's HTMLElements.  It does NOT replace any existing class(es)\nalready defined.</p>\n\n<pre><code>// Before\n&lt;div id=\"foo\" class=\"monkey\" /&gt;\n\ncan.addClass(can.$(\"#foo\"),\"bar\")\n\n// After\n&lt;div id=\"foo\" class=\"monkey bar\" /&gt;\n</code></pre>\n\n<p>You can also pass multiple class(es) and it will add them to the existing\nset also.</p>\n\n<pre><code>// Before\n&lt;div id=\"foo\" class=\"monkey\" /&gt;\n\ncan.addClass(can.$(\"#foo\"),\"bar man\")\n\n// After\n&lt;div id=\"foo\" class=\"monkey bar man\" /&gt;\n</code></pre>\n\n<p>This works similarly to [http://api.jquery.com/addClass/ jQuery.fn.addClass].</p>", "description": "<p>Add a class to elements. </p>", "title": "", "name": "can.addClass", "type": "function", "parent": "can.util", "signatures": [{"code": "can.addClass(nodeList, className)", "description": "", "params": [{"types": [{"type": "NodeList"}], "name": "nodeList", "description": "<p>The list of HTML elements to add the class to.</p>"}, {"types": [{"type": "String"}], "name": "className", "description": "<p>The class to add.</p>"}]}], "comment": " ", "src": "can/util/can.js", "line": 467})