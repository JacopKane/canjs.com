c({"type": "function", "name": "static.Y.mix", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}, {"type": "Object"}], "name": "receiver", "description": "<p>The object or function to receive the mixed\n properties.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}, {"type": "Object"}], "name": "supplier", "description": "<p>The object or function supplying the\n properties to be mixed.</p>"}, {"types": [{"type": "Boolean"}], "optional": true, "name": "overwrite", "defaultValue": "false", "description": "<p>If <code>true</code>, properties that already exist\n on the receiver will be overwritten with properties from the supplier.</p>"}, {"types": [{"type": "String"}, {"type": "["}], "optional": true, "name": "whitelist", "description": "<p>An array of property names to copy. If\n specified, only the whitelisted properties will be copied, and all others\n will be ignored.</p>"}, {"types": [{"type": "Number"}], "optional": true, "name": "mode", "defaultValue": "0", "description": "<p>Mix mode to use. See above for available modes.</p>"}, {"types": [{"type": "Boolean"}], "optional": true, "name": "merge", "defaultValue": "false", "description": "<p>If <code>true</code>, objects and arrays that already\n exist on the receiver will have the corresponding object/array from the\n supplier merged into them, rather than being skipped or overwritten. When\n both <em>overwrite</em> and <em>merge</em> are <code>true</code>, <em>merge</em> takes precedence.</p>"}], "parent": "static", "body": "", "description": "<p>Mixes <em>supplier</em>'s properties into <em>receiver</em>.</p>\n\n<p>Properties on <em>receiver</em> or <em>receiver</em>'s prototype will not be overwritten or\n shadowed unless the <em>overwrite</em> parameter is <code>true</code>, and will not be merged\n unless the <em>merge</em> parameter is <code>true</code>.</p>\n\n<p>In the default mode (0), only properties the supplier owns are copied (prototype\n properties are not copied). The following copying modes are available:\n<code>0</code>: <em>Default</em>. Object to object.\n<code>1</code>: Prototype to prototype.\n<code>2</code>: Prototype to prototype and object to object.\n<code>3</code>: Prototype to object.\n<code>4</code>: Object to prototype.</p>", "comment": "undefined @method mix\n", "returns": {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}, {"type": "Object"}, {"type": "YUI"}], "description": "<p>The receiver, or the YUI instance if the\n specified receiver is falsy.</p>"}, "src": "can/lib/yui-3.7.3.js", "line": 2775})