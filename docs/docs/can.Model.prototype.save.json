c({"type": "function", "name": "can.Model.prototype.save", "parent": "can.Model.prototype", "body": "<p><code>model.save([success(model)],[error(xhr)])</code> creates or updates \nthe model instance using [can.Model.create] or\n[can.Model.update] depending if the instance\n[can.Model::isNew has an id or not].</p>\n\n<h2>Using <code>save</code> to create an instance.</h2>\n\n<p>If <code>save</code> is called on an instance that does not have \nan [can.Model.id id] property, it calls [can.Model.create]\nwith the instance's properties.  It also [can.trigger triggers]\na \"created\" event on the instance and the model.</p>\n\n<pre><code>// create a model instance\nvar todo = new Todo({name: \"dishes\"})\n\n// listen when the instance is created\ntodo.bind(\"created\", function(ev){\n     this //-&gt; todo\n})\n\n// save it on the server\ntodo.save(function(todo){\n     console.log(\"todo\", todo, \"created\")\n});\n</code></pre>\n\n<h2>Using <code>save</code> to update an instance.</h2>\n\n<p>If save is called on an instance that has \nan [can.Model.id id] property, it calls [can.Model.create]\nwith the instance's properties.  When the save is complete,\nit triggers an \"updated\" event on the instance and the instance's model.</p>\n\n<p>Instances with an\n<strong>id</strong> are typically retrieved with [can.Model.findAll] or\n[can.Model.findOne].  </p>\n\n<pre><code>// get a created model instance\nTodo.findOne({id: 5},function(todo){\n\n  // listen when the instance is updated\n  todo.bind(\"updated\", function(ev){\n       this //-&gt; todo\n  })\n\n  // update the instance's property\n  todo.attr(\"complete\", true)\n\n  // save it on the server\n  todo.save(function(todo){\n       console.log(\"todo\", todo, \"updated\")\n  });\n\n});\n</code></pre>", "description": "<p>Save a model back to the server. </p>", "signatures": [{"code": "save([success[, error]])", "description": "", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "optional": true, "name": "success", "description": "<p>A callback to call on successful save. The callback recieves\nthe can.Model after saving.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "optional": true, "name": "error", "description": "<p>A callback to call when an error occurs. The callback receives the\nXmlHttpRequest object.</p>"}], "returns": {"types": [{"type": "can.Deferred"}], "description": "<p>A Deferred that resolves to the Model after it has been saved.</p>"}}], "comment": " ", "src": "can/model/model.js", "line": 887})