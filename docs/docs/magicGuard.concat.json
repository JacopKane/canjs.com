c({"type": "function", "name": "magicGuard.concat", "params": [{"name": "item", "types": [{"type": "*"}]}], "parent": "magicGuard", "body": "", "description": "<p>=====\n                     slice: function(begin, end){\n                     // summary:\n                     //        Returns a new NodeList, maintaining this one in place\n                     // description:\n                     //        This method behaves exactly like the Array.slice method\n                     //        with the caveat that it returns a dojo/NodeList and not a\n                     //        raw Array. For more details, see Mozilla's <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice\">slice\n                     //        documentation</a>\n                     // begin: Integer\n                     //        Can be a positive or negative integer, with positive\n                     //        integers noting the offset to begin at, and negative\n                     //        integers denoting an offset from the end (i.e., to the left\n                     //        of the end)\n                     // end: Integer?\n                     //        Optional parameter to describe what position relative to\n                     //        the NodeList's zero index to end the slice at. Like begin,\n                     //        can be positive or negative.\n                     return this._wrap(a.slice.apply(this, arguments));\n                     },</p>\n\n<pre><code>                 splice: function(index, howmany, item){\n                 // summary:\n                 //        Returns a new NodeList, manipulating this NodeList based on\n                 //        the arguments passed, potentially splicing in new elements\n                 //        at an offset, optionally deleting elements\n                 // description:\n                 //        This method behaves exactly like the Array.splice method\n                 //        with the caveat that it returns a dojo/NodeList and not a\n                 //        raw Array. For more details, see Mozilla's [splice\n                 //        documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice)\n                 //        For backwards compatibility, calling .end() on the spliced NodeList\n                 //        does not return the original NodeList -- splice alters the NodeList in place.\n                 // index: Integer\n                 //        begin can be a positive or negative integer, with positive\n                 //        integers noting the offset to begin at, and negative\n                 //        integers denoting an offset from the end (i.e., to the left\n                 //        of the end)\n                 // howmany: Integer?\n                 //        Optional parameter to describe what position relative to\n                 //        the NodeList's zero index to end the slice at. Like begin,\n                 //        can be positive or negative.\n                 // item: Object...?\n                 //        Any number of optional parameters may be passed in to be\n                 //        spliced into the NodeList\n                 return this._wrap(a.splice.apply(this, arguments));    // dojo/NodeList\n                 },\n\n                 indexOf: function(value, fromIndex){\n                 // summary:\n                 //        see dojo.indexOf(). The primary difference is that the acted-on\n                 //        array is implicitly this NodeList\n                 // value: Object\n                 //        The value to search for.\n                 // fromIndex: Integer?\n                 //        The location to start searching from. Optional. Defaults to 0.\n                 // description:\n                 //        For more details on the behavior of indexOf, see Mozilla's\n                 //        [indexOf\n                 //        docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf)\n                 // returns:\n                 //        Positive Integer or 0 for a match, -1 of not found.\n                 return d.indexOf(this, value, fromIndex); // Integer\n                 },\n\n                 lastIndexOf: function(value, fromIndex){\n                 // summary:\n                 //        see dojo.lastIndexOf(). The primary difference is that the\n                 //        acted-on array is implicitly this NodeList\n                 // description:\n                 //        For more details on the behavior of lastIndexOf, see\n                 //        Mozilla's [lastIndexOf\n                 //        docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\n                 // value: Object\n                 //        The value to search for.\n                 // fromIndex: Integer?\n                 //        The location to start searching from. Optional. Defaults to 0.\n                 // returns:\n                 //        Positive Integer or 0 for a match, -1 of not found.\n                 return d.lastIndexOf(this, value, fromIndex); // Integer\n                 },\n\n                 every: function(callback, thisObject){\n                 // summary:\n                 //        see `dojo.every()` and the [Array.every\n                 //        docs](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every).\n                 //        Takes the same structure of arguments and returns as\n                 //        dojo.every() with the caveat that the passed array is\n                 //        implicitly this NodeList\n                 // callback: Function\n                 //        the callback\n                 // thisObject: Object?\n                 //        the context\n                 return d.every(this, callback, thisObject); // Boolean\n                 },\n\n                 some: function(callback, thisObject){\n                 // summary:\n                 //        Takes the same structure of arguments and returns as\n                 //        `dojo.some()` with the caveat that the passed array is\n                 //        implicitly this NodeList.  See `dojo.some()` and Mozilla's\n                 //        [Array.some\n                 //        documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some).\n                 // callback: Function\n                 //        the callback\n                 // thisObject: Object?\n                 //        the context\n                 return d.some(this, callback, thisObject); // Boolean\n                 },\n                 =====\n</code></pre>", "src": "can/util/dojo/dojo-1.8.1.js", "line": 5408})