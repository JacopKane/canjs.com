c({"name": "options.type", "type": "property", "parent": null, "body": "", "description": "<p>Default options to use for all requests.</p>\n\n<p>Note that while all available options are documented here for ease of\ndiscovery, some options (like callback functions) only make sense at the\ntransaction level.</p>\n\n<p>Callback functions specified via the options object or the <code>options</code>\nparameter of the <code>css()</code>, <code>js()</code>, or <code>load()</code> methods will receive the\ntransaction object as a parameter. See <code>Y.Get.Transaction</code> for details on\nthe properties and methods available on transactions.</p>\n\n<p>asynchronously, meaning they're requested in parallel and execution\norder is not guaranteed. Has no effect on CSS, since CSS is always\nloaded asynchronously.</p>\n\n<p>should be added to inserted nodes. By default, the <code>charset</code> attribute\nwill be set to \"utf-8\" and nodes will be given an auto-generated <code>id</code>\nattribute, but you can override these with your own values if desired.</p>\n\n<p>purge inserted nodes after the purge threshold is reached. This is\n<code>true</code> by default for JavaScript, but <code>false</code> for CSS since purging a\nCSS node will also remove any styling applied by the referenced file.</p>\n\n<p>callback functions. Defaults to the transaction object.</p>\n\n<p>callbacks.</p>\n\n<p>inserted. By default, the current document is used.</p>\n\n<p>string of an element before which all generated nodes should be\ninserted. If not specified, Get will automatically determine the best\nplace to insert nodes for maximum compatibility.</p>\n\n<p>is complete, regardless of whether it succeeded or failed.</p>\n\n<p>transaction fails, times out, or is aborted.</p>\n\n<p>individual request in a transaction either succeeds or fails.</p>\n\n<p>transaction completes successfully with no errors. Note that in browsers\nthat don't support the <code>error</code> event on CSS <code>&lt;link&gt;</code> nodes, a failed CSS\nrequest may still be reported as a success because in these browsers\nit can be difficult or impossible to distinguish between success and\nfailure for CSS resources.</p>\n\n<p>transaction times out.</p>\n\n<p>milliseconds) for detecting CSS load completion in browsers that don't\nsupport the <code>load</code> event on <code>&lt;link&gt;</code> nodes. This isn't used for\nJavaScript.</p>\n\n<p>before triggering an automatic purge when <code>autopurge</code> is <code>true</code>.</p>\n\n<p>aborting a transaction. When a timeout occurs, the <code>onTimeout</code> callback\nis called, followed by <code>onFailure</code> and finally <code>onEnd</code>. By default,\nthere is no timeout.</p>\n\n<p>is set automatically by the <code>css()</code> and <code>js()</code> functions and will be\nignored there, but may be useful when using the <code>load()</code> function. If\nnot specified, the type will be inferred from the URL, defaulting to\n\"js\" if the URL doesn't contain a recognizable file extension.</p>", "comment": "undefined@since 3.5.0\n", "types": [{"type": "String"}], "title": "Resource type (\"css\" or \"js\"). This option", "src": "can/lib/yui-3.7.3.js", "line": 3898})