c({"type": "page", "name": "contributing", "body": "", "description": "<h1>Contributing to CanJS</h1>\n\n<h2>Contributing</h2>\n\n<p>When contributing, include tests with new features or bug fixes in a feature branch until you're ready to submit the code for consideration; then fork the repository, push to the fork, and issue a pull request.</p>\n\n<p>Clone the branch and create a new feature branch.</p>\n\n<pre><code>$ git clone git://github.com/bitovi/canjs.git\n$ git branch html5-fix\n$ git checkout html5-fix\n</code></pre>\n\n<p>Add the new remote to your local repository on your local machine.</p>\n\n<pre><code>$ git remote add github git@github.com:bitovi/canjs.git\n</code></pre>\n\n<p>Once your happy with your changes, push to the feature branch.</p>\n\n<pre><code>$ git push github html5-fix\n</code></pre>\n\n<p>Now that we have pushed all the changes to the repo, we need to submit a Pull Request to the main branch.  Navigate to <a href=\"https://github.com/bitovi/canjs/pulls\">Pull Requests</a> and click 'Pull Request' in the top navigation bar.  Fill in some details about your potential patch including a meaningful title. When finished, press \"Send pull request\". The core team will be notified about your submission and let you know of any problems or targeted release date.</p>\n\n<h2>Documentation</h2>\n\n<p>If your pull request affects the public API, make relevant changes to the documentation.  Documentation is found either inline or in markdown files in the respective directory.</p>\n\n<h2>Reporting Bugs</h2>\n\n<p>To report a bug, please visit <a href=\"https://github.com/bitovi/canjs/issues\">GitHub Issues</a>.  </p>\n\n<p>When filing a bug, its helpful to include:</p>\n\n<ul>\n<li>Small examples using tools like <a href=\"http://jsbin.com/\">JSBin</a></li>\n<li>Breaking unit tests</li>\n<li>Proposed fix solutions</li>\n<li>Search for previous tickets, if there is one add to that one rather than creating another.</li>\n</ul>\n\n<p>You can also post on the <a href=\"https://forum.javascriptmvc.com/canjs\">Forums</a> or talk to us in <a href=\"http://webchat.freenode.net/?channels=canjs\">IRC #canjs channel</a>.</p>\n\n<h2>Running Tests Locally</h2>\n\n<p>Its important that all tests pass before sending a pull request.  TravisCI will determine if your commits pass the tests, but while your developing you can run the QUnit tests locally.  </p>\n\n<p>Open <code>~/can/test/tests.html</code> in a web browser to run the tests locally.  Each module has its own tests too, you can run them by opening the <code>qunit.html</code> in each folder.</p>\n\n<p>CanJS supports the following browsers:</p>\n\n<ul>\n<li>Chrome Current-1</li>\n<li>Safari Current-1</li>\n<li>Firefox Current-1</li>\n<li>IE 7+</li>\n<li>Opera Current-1</li>\n</ul>\n\n<h2>Style Guide</h2>\n\n<h3>Linting</h3>\n\n<p>Grunt provides a JSHint task to verify some basic, practical soundness of the codebase. The options are preset.</p>\n\n<h3>Spacing</h3>\n\n<p>Indentation with tabs, not spaces.</p>\n\n<p><code>if/else/for/while/try</code> always have braces, with the first brace on the same line.  For example:</p>\n\n<pre><code>if(foo){\n\n}\n</code></pre>\n\n<p>Spaces after commas.  For example:</p>\n\n<pre><code>myfn = function(foo, bar, moo){ ... }\n</code></pre>\n\n<h3>Assignments</h3>\n\n<p>Assignments should always have a semicolon after them.</p>\n\n<p>Assignments in a declaration should always be on their own line. Declarations that don't have an assignment should be listed together at the start of the declaration. For example:</p>\n\n<pre><code>// Bad\nvar foo = true;\nvar bar = false;\nvar a;\nvar b;\n\n// Good\nvar a, b,\n    foo = true,\n    bar = false;\n</code></pre>\n\n<h3>Equality</h3>\n\n<p>Strict equality checks <code>===</code> should be used in favor of <code>==</code>. The only exception is when checking for undefined and null by way of null.</p>\n\n<pre><code>// Bad\nif(bar == \"can\"){ ... }\n\n// Good\nif(bar === \"can\"){ ... }\n</code></pre>\n\n<p>If the statement is a truthey or falsey, use implied operators.  Falseys are when variables return <code>false</code>, <code>undefined</code>, <code>null</code>, or <code>0</code>.  Trutheys are when variables return <code>true</code>, <code>1</code>, or anything defined.</p>\n\n<p>For example:</p>\n\n<pre><code>// Bad\nif(bar === false){ ... }\n\n// Good \nif(bar){ ... }\n\n// Good\nvar foo = [];\nif(!foo.length){ ... }\n</code></pre>\n\n<h3>Quotes</h3>\n\n<p>Use double quotes.</p>\n\n<pre><code>var double = \"I am wrapped in double quotes\";\n</code></pre>\n\n<p>Strings that require inner quoting must use double outside and single inside.</p>\n\n<pre><code>var html = \"&lt;div id='my-id'&gt;&lt;/div&gt;\";\n</code></pre>\n\n<h3>Comments</h3>\n\n<p>Single line comments go OVER the line they refer to:</p>\n\n<pre><code>// We need an explicit \"bar\", because later in the code foo is checked.\nvar foo = \"bar\";\n</code></pre>\n\n<p>For long comments, use:</p>\n\n<pre><code>/* myFn\n * Four score and seven—pause—minutes ago...\n  */\n</code></pre>", "src": "can/contributing.md"})