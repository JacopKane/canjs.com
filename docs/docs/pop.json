c({"name": "pop", "type": "function", "parent": "can.Observe.List.prototype", "body": "", "description": "<p>Remove an element from the end of a List. </p>", "title": "", "signatures": [{"code": "pop()", "description": "<p><code>push</code> removes an element from the end of a List.</p>", "params": [], "returns": {"types": [{"type": "*"}], "description": "<p>the element just popped off the List, or <code>undefined</code> if the List was empty</p>\n\n<p><code>pop</code> is the opposite action from <code>[can.Observe.List.push push]</code>:</p>\n\n<pre>var list = new can.Observe.List(['Alice']);\n\nlist.push('Bob', 'Eve');\nlist.attr(); // ['Alice', 'Bob', 'Eve']\n\nlist.pop(); // 'Eve'\nlist.pop(); // 'Bob'\nlist.pop(); // 'Alice'\nlist.pop(); // undefined</pre>\n\n<h2>Events</h2>\n\n<p><code>pop</code> causes <em>change</em>, <em>remove</em>, and <em>length</em> events to be fired if the List is not empty\nwhen it is called.</p>\n\n<h2>See also</h2>\n\n<p><code>pop</code> has its counterpart in [can.Observe.List.push push], or you may be\nlooking for [can.Observe.List.unshift unshift] and its counterpart [can.Observe.List.shift shift].</p>"}}], "src": "can/observe/observe.js", "line": 1652})