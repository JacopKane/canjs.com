c({"body": "", "description": "<p>Register a Mustache template string or create a renderer function. </p>", "title": "", "name": "can.view.mustache", "type": "function", "parent": "can.view", "signatures": [{"code": "can.view.mustache(id, template)", "description": "", "params": [{"types": [{"type": "String"}], "name": "id", "description": "<p>An ID for the template.</p>"}, {"types": [{"type": "String"}], "name": "template", "description": "<p>A Mustache template in string form.</p>"}]}, {"code": "can.view.mustache(template)", "description": "", "params": [{"types": [{"type": "String"}], "name": "template", "description": "<p>A Mustache template in string form.</p>"}], "returns": {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "description": "<p>A renderer function that takes data and helpers.</p>\n\n<p><code>can.view.mustache([id,] template)</code> registers an Mustache template string \nfor a given id programatically. The following\nregisters <code>myStache</code> and renders it into a documentFragment.</p>\n\n<pre><code> can.view.ejs('myStache', '&lt;h2&gt;{{message}}&lt;/h2&gt;');\n\n var frag = can.view('myStache', {\n     message : 'Hello there!'\n });\n\n frag // -&gt; &lt;h2&gt;Hello there!&lt;/h2&gt;\n</code></pre>\n\n<p>To convert the template into a render function, just pass \nthe template. Call the render function with the data\nyou want to pass to the template and it returns the \ndocumentFragment.</p>\n\n<pre><code> var renderer = can.view.mustache('&lt;div&gt;{{message}}&lt;/div&gt;');\n renderer({\n     message : 'Mustache'\n }); // -&gt; &lt;div&gt;Mustache&lt;/div&gt;\n</code></pre>"}}], "src": "can/view/view.js", "line": 140})