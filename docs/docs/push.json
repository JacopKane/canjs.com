c({"name": "push", "type": "function", "parent": "can/observe/sort/sort.js", "body": "", "description": "<p>Add items to the end of the list.</p>\n\n<pre><code>var l = new can.Observe.List([]);\n\nl.bind('change', function(\n    ev,        // the change event\n    attr,      // the attr that was changed, for multiple items, \"*\" is used\n    how,       // \"add\"\n    newVals,   // an array of new values pushed\n    oldVals,   // undefined\n    where      // the location where these items where added\n    ) {\n\n})\n\nl.push('0','1','2');\n</code></pre>", "title": "", "signatures": [{"code": "push(...elements)", "description": "<p><code>push</code> adds elements onto the end of a List.]</p>", "params": [{"types": [{"type": "*"}], "name": "elements", "description": "<p>the elements to add to the List</p>"}], "returns": {"types": [{"type": "Number"}], "description": "<p>the new length of the List</p>\n\n<p><code>push</code> is fairly straightforward:</p>\n\n<pre>var list = new can.Observe.List(['Alice']);\n\nlist.push('Bob', 'Eve');\nlist.attr(); // ['Alice', 'Bob', 'Eve']</pre>\n\n<p>If you have an array you want to concatenate to the end\nof the List, you can use <code>apply</code>:</p>\n\n<pre>var names = ['Bob', 'Eve'],\n    list = new can.Observe.List(['Alice']);\n\nlist.push.apply(list, names);\nlist.attr(); // ['Alice', 'Bob', 'Eve']</pre>\n\n<h2>Events</h2>\n\n<p><code>push</code> causes <em>change</em>, <em>add</em>, and <em>length</em> events to be fired.</p>\n\n<h2>See also</h2>\n\n<p><code>push</code> has a counterpart in [can.Observe.List.pop pop], or you may be\nlooking for [can.Observe.List.unshift unshift] and its counterpart [can.Observe.List.shift shift].</p>"}}], "src": "can/observe/observe.js", "line": 1533, "params": [{"variable": true, "types": [{"type": "*"}], "optional": true, "name": "items", "description": "<p>items to add to the end of the list.</p>"}], "returns": {"types": [{"type": "Number"}], "description": "<p>the number of items in the array</p>"}})