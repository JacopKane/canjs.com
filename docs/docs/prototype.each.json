c({"type": "function", "name": "prototype.each", "parent": "prototype", "body": "", "description": "<p>Call a function on each property of an Observe. </p>", "signatures": [{"code": "each(callback)", "description": "<p><code>each</code> iterates through the Observe, calling a function\nfor each property value and key.</p>", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [{"types": [{"type": "*"}]}, {"types": [{"type": "String"}]}], "context": undefined}], "name": "callback", "description": "<p>the function to call for each property\nThe value and key of each property will be passed as the first and second\narguments, respectively, to the callback. If the callback returns false,\nthe loop will stop.</p>"}], "returns": {"types": [{"type": "can.Observe"}], "description": "<p>this Observe, for chaining</p>\n\n<pre>var names = [];\nnew can.Observe({a: 'Alice', b: 'Bob', e: 'Eve'}).each(function(value, key) {\n    names.push(value);\n});\n\nnames; // ['Alice', 'Bob', 'Eve']\n\nnames = [];\nnew can.Observe({a: 'Alice', b: 'Bob', e: 'Eve'}).each(function(value, key) {\n    names.push(value);\n    if(key === 'b') {\n        return false;\n    }\n});\n\nnames; // ['Alice', 'Bob']\n</pre>"}}], "src": "can/observe/observe.js", "line": 514})