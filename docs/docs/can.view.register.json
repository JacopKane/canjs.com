c({"type": "function", "name": "can.view.register", "parent": "can.view", "body": "<p>Registers a template engine to be used with \nview helpers and compression.  </p>\n\n<h2>Example</h2>\n\n<pre>can.View.register({\n    suffix : \"tmpl\",\n plugin : \"jquery/view/tmpl\",\n    renderer: function( id, text ) {\n        return function(data){\n            return jQuery.render( text, data );\n        }\n    },\n    script: function( id, text ) {\n        var tmpl = can.tmpl(text).toString();\n        return \"function(data){return (\"+\n            tmpl+\n            \").call(jQuery, jQuery, data); }\";\n    }\n})</pre>     ", "description": "<p>Register a templating language. </p>", "title": "", "signatures": [{"code": "can.view.register(info)", "description": "", "params": [{"types": [{"type": "Object", "options": [{"name": "plugin", "description": "The location of the templating language's plugin.", "types": [{"type": "String"}]}, {"name": "suffix", "description": "Files with this suffix will use this templating language's plugin by default.", "types": [{"type": "String"}]}, {"name": "renderer", "description": "A function that returns a function that, given data, will render the template with that data.\nThe __renderer__ function receives the id of the template and the text of the template.", "types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}]}, {"name": "script", "description": "A function that returns the string form of the processed template.\n", "types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}]}]}], "name": "info", "description": "<p>Information about the templating language.</p>"}]}], "comment": " ", "src": "can/view/view.js", "line": 225})