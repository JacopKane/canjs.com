c({"type": "function", "name": "can.Construct.static.newInstance", "parent": "can.Construct.static", "body": "<p>Creates a new instance of the constructor function. This method is useful for creating new instances\nwith arbitrary parameters. Typically, however, you will simply want to call the constructor with the\n<strong>new</strong> operator.</p>\n\n<h2>Example</h2>\n\n<p>The following creates a <code>Person</code> Construct and then creates a new instance of Person,\nusing <code>apply</code> on newInstance to pass arbitrary parameters.</p>\n\n<pre>var Person = can.Construct({\n  init : function(first, middle, last) {\n    this.first = first;\n    this.middle = middle;\n    this.last = last;\n  }\n});\n\nvar args = [\"Justin\",\"Barry\",\"Meyer\"],\n    justin = new Person.newInstance.apply(null, args);</pre>     ", "description": "<p>Create a new instance of a Construct. </p>", "title": "newInstance", "signatures": [{"code": "newInstance([...args])", "description": "", "params": [{"types": [{"type": "*"}], "optional": true, "name": "args", "description": "<p>arguments that get passed to [can.Construct::setup] and [can.Construct::init]. Note\nthat if [can.Construct::setup] returns an array, those arguments will be passed to [can.Construct::init]\ninstead.</p>"}], "returns": {"types": [{"type": "class"}], "description": "<p>instance of the class</p>"}}], "comment": " ", "src": "can/construct/construct.js", "line": 26})