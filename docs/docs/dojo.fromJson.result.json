c({"name": "dojo.fromJson.result", "type": "property", "parent": "dojo.fromJson", "body": "", "description": "<p>=====\n             return {\n             // summary:\n             //        This module defines the user configuration during bootstrap.\n             // description:\n             //        By defining user configuration as a module value, an entire configuration can be specified in a build,\n             //        thereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig.\n             //        Also, when multiple instances of dojo exist in a single application, each will necessarily be located\n             //        at an unique absolute module identifier as given by the package configuration. Implementing configuration\n             //        as a module allows for specifying unique, per-instance configurations.\n             // example:\n             //        Create a second instance of dojo with a different, instance-unique configuration (assume the loader and\n             //        dojo.js are already loaded).\n             //        |   // specify a configuration that creates a new instance of dojo at the absolute module identifier \"myDojo\"\n             //        |   require({\n             //        |       packages:[{\n             //        |           name:\"myDojo\",\n             //        |           location:\".\", //assume baseUrl points to dojo.js\n             //        |       }]\n             //        |   });\n             //        |\n             //        |   // specify a configuration for the myDojo instance\n             //        |   define(\"myDojo/config\", {\n             //        |       // normal configuration variables go here, e.g.,\n             //        |       locale:\"fr-ca\"\n             //        |   });\n             //        |\n             //        |   // load and use the new instance of dojo\n             //        |   require([\"myDojo\"], function(dojo){\n             //        |       // dojo is the new instance of dojo\n             //        |       // use as required\n             //        |   });</p>\n\n<pre><code>         // isDebug: Boolean\n         //        Defaults to `false`. If set to `true`, ensures that Dojo provides\n         //        extended debugging feedback via Firebug. If Firebug is not available\n         //        on your platform, setting `isDebug` to `true` will force Dojo to\n         //        pull in (and display) the version of Firebug Lite which is\n         //        integrated into the Dojo distribution, thereby always providing a\n         //        debugging/logging console when `isDebug` is enabled. Note that\n         //        Firebug's `console.*` methods are ALWAYS defined by Dojo. If\n         //        `isDebug` is false and you are on a platform without Firebug, these\n         //        methods will be defined as no-ops.\n         isDebug: false,\n\n         // locale: String\n         //        The locale to assume for loading localized resources in this page,\n         //        specified according to [RFC 3066](http://www.ietf.org/rfc/rfc3066.txt).\n         //        Must be specified entirely in lowercase, e.g. `en-us` and `zh-cn`.\n         //        See the documentation for `dojo.i18n` and `dojo.requireLocalization`\n         //        for details on loading localized resources. If no locale is specified,\n         //        Dojo assumes the locale of the user agent, according to `navigator.userLanguage`\n         //        or `navigator.language` properties.\n         locale: undefined,\n\n         // extraLocale: Array\n         //        No default value. Specifies additional locales whose\n         //        resources should also be loaded alongside the default locale when\n         //        calls to `dojo.requireLocalization()` are processed.\n         extraLocale: undefined,\n\n         // baseUrl: String\n         //        The directory in which `dojo.js` is located. Under normal\n         //        conditions, Dojo auto-detects the correct location from which it\n         //        was loaded. You may need to manually configure `baseUrl` in cases\n         //        where you have renamed `dojo.js` or in which `&lt;base&gt;` tags confuse\n         //        some browsers (e.g. IE 6). The variable `dojo.baseUrl` is assigned\n         //        either the value of `djConfig.baseUrl` if one is provided or the\n         //        auto-detected root if not. Other modules are located relative to\n         //        this path. The path should end in a slash.\n         baseUrl: undefined,\n\n         // modulePaths: [deprecated] Object\n         //        A map of module names to paths relative to `dojo.baseUrl`. The\n         //        key/value pairs correspond directly to the arguments which\n         //        `dojo.registerModulePath` accepts. Specifying\n         //        `djConfig.modulePaths = { \"foo\": \"../../bar\" }` is the equivalent\n         //        of calling `dojo.registerModulePath(\"foo\", \"../../bar\");`. Multiple\n         //        modules may be configured via `djConfig.modulePaths`.\n         modulePaths: {},\n\n         // addOnLoad: Function|Array\n         //        Adds a callback via dojo/ready. Useful when Dojo is added after\n         //        the page loads and djConfig.afterOnLoad is true. Supports the same\n         //        arguments as dojo/ready. When using a function reference, use\n         //        `djConfig.addOnLoad = function(){};`. For object with function name use\n         //        `djConfig.addOnLoad = [myObject, \"functionName\"];` and for object with\n         //        function reference use\n         //        `djConfig.addOnLoad = [myObject, function(){}];`\n         addOnLoad: null,\n\n         // parseOnLoad: Boolean\n         //        Run the parser after the page is loaded\n         parseOnLoad: false,\n\n         // require: String[]\n         //        An array of module names to be loaded immediately after dojo.js has been included\n         //        in a page.\n         require: [],\n\n         // defaultDuration: Number\n         //        Default duration, in milliseconds, for wipe and fade animations within dijits.\n         //        Assigned to dijit.defaultDuration.\n         defaultDuration: 200,\n\n         // dojoBlankHtmlUrl: String\n         //        Used by some modules to configure an empty iframe. Used by dojo/io/iframe and\n         //        dojo/back, and dijit/popup support in IE where an iframe is needed to make sure native\n         //        controls do not bleed through the popups. Normally this configuration variable\n         //        does not need to be set, except when using cross-domain/CDN Dojo builds.\n         //        Save dojo/resources/blank.html to your domain and set `djConfig.dojoBlankHtmlUrl`\n         //        to the path on your domain your copy of blank.html.\n         dojoBlankHtmlUrl: undefined,\n\n         // ioPublish: Boolean?\n         //        Set this to true to enable publishing of topics for the different phases of\n         //        IO operations. Publishing is done via dojo/topic.publish(). See dojo/main.__IoPublish for a list\n         //        of topics that are published.\n         ioPublish: false,\n\n         // useCustomLogger: Anything?\n         //        If set to a value that evaluates to true such as a string or array and\n         //        isDebug is true and Firebug is not available or running, then it bypasses\n         //        the creation of Firebug Lite allowing you to define your own console object.\n         useCustomLogger: undefined,\n\n         // transparentColor: Array\n         //        Array containing the r, g, b components used as transparent color in dojo.Color;\n         //        if undefined, [255,255,255] (white) will be used.\n         transparentColor: undefined,\n\n         // deps: Function|Array\n         //        Defines dependencies to be used before the loader has been loaded.\n         //        When provided, they cause the loader to execute require(deps, callback) \n         //        once it has finished loading. Should be used with callback.\n         deps: undefined,\n\n         // callback: Function|Array\n         //        Defines a callback to be used when dependencies are defined before \n         //        the loader has been loaded. When provided, they cause the loader to \n         //        execute require(deps, callback) once it has finished loading. \n         //        Should be used with deps.\n         callback: undefined,\n\n         // deferredInstrumentation: Boolean\n         //        Whether deferred instrumentation should be loaded or included\n         //        in builds.\n         deferredInstrumentation: true,\n\n         // useDeferredInstrumentation: Boolean|String\n         //        Whether the deferred instrumentation should be used.\n         //\n         //        * `\"report-rejections\"`: report each rejection as it occurs.\n         //        * `true` or `1` or `\"report-unhandled-rejections\"`: wait 1 second\n         //            in an attempt to detect unhandled rejections.\n         useDeferredInstrumentation: \"report-unhandled-rejections\"\n         };\n         =====\n</code></pre>", "src": "can/util/dojo/dojo-1.8.1.js", "line": 16534})