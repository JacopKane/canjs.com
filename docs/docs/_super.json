c({"type": "function", "name": "_super", "body": "", "description": "<p>can.Construct.super is a plugin that makes it easier to call base\nfunctions from inside inheriting functions.</p>", "parent": "can.Construct", "plugin": "can/construct/super", "test": "can/construct/super/qunit.html", "download": "http://donejs.com/can/dist/can.construct.super.js", "title": "", "signatures": [{"code": undefined, "description": "<p>_super([...args])</p>", "params": [{"variable": true, "types": [{"type": "["}], "name": "args", "description": "<p>parameters to pass to the base function</p>\n\n<p>With this plugin, functions that are inheriting from base functions\nare provided with a specialized <code>this._super</code> reference to the base\nfunction from which they inherit.</p>\n\n<p>This is especially useful for calling base classes' <code>[can.Construct::init|init]</code> and <code>[can.Construct::setup|ssetup]</code>, but it can be used in any inheriting function.</p>\n\n<p>The <code>Person</code> and <code>Programmer</code> examples from <code>[can.Construct::init|init]</code> demonstrate <code>_super</code>'s use.\nHere's how those classes look without can.Construct.super:</p>\n\n<pre>can.Construct(\"Person\", {\n    init: function(first, last) {\n        this.first = first;\n        this.last  = last;\n    }\n});\n\nPerson(\"Programmer\", {\n    init: function(first, last, language) {\n        // call base's init\n        Person.prototype.init.apply(this, arguments);\n\n        // other initialization code\n        this.language = language;\n    },\n    bio: function() {\n        return 'Hi! I'm ' + this.first + ' ' + this.last +\n            ' and I write ' + this.language + '.';\n    }\n});</pre>\n\n<p>And here's how <code>Programmer</code> works using <code>_super</code>:</p>\n\n<pre>Person(\"Programmer\", {\n    init: function(first, last, language) {\n        // call base's init\n        this._super(first, last);\n\n        // other initialization code\n        this.language = language;\n    },\n    bio: function() {\n        return 'Hi! I'm ' + this.first + ' ' + this.last +\n            ' and I write ' + this.language + '.';\n    }\n});</pre>\n\n<p>If you want to pass an array of arguments (or an arguments object) to <code>_super</code>, use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">apply</a>:</p>\n\n<pre>Person(\"Programmer\", {\n    init: function(first, last, language) {\n        // call base's init\n        this._super.apply(this, arguments);\n\n        // other initialization code\n        this.language = language;\n    },\n    bio: function() {\n        return 'Hi! I'm ' + this.first + ' ' + this.last +\n            ' and I write ' + this.language + '.';\n    }\n});</pre>\n\n<h2><code>_super</code> on constructors</h2>\n\n<p>can.Construct.super also adds <code>super</code> to the constructor, so you\ncan use it in static functions.</p>\n\n<p>Here is a base class that has a method that squares numbers and an inherited class that has a method that cubes numbers:</p>\n\n<pre>can.Construct('Squarer', {\n    raise: function(n) {\n        return n*n;\n    }\n}, {});\n\nSquarer('Cuber', {\n    raise: function(n) {\n        return n * this_super(n);\n    }\n}, {});</pre>"}]}], "src": "can/construct/super/super.md"})