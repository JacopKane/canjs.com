c({"name": "xhr._create._toArray", "type": "property", "parent": "xhr._create", "body": "", "description": "<p>=====\n                 delegate: function(obj, props){\n                 // summary:\n                 //        Returns a new object which \"looks\" to obj for properties which it\n                 //        does not have a value for. Optionally takes a bag of properties to\n                 //        seed the returned object with initially.\n                 // description:\n                 //        This is a small implementation of the Boodman/Crockford delegation\n                 //        pattern in JavaScript. An intermediate object constructor mediates\n                 //        the prototype chain for the returned object, using it to delegate\n                 //        down to obj for property lookup when object-local lookup fails.\n                 //        This can be thought of similarly to ES4's \"wrap\", save that it does\n                 //        not act on types but rather on pure objects.\n                 // obj: Object\n                 //        The object to delegate to for properties not found directly on the\n                 //        return object or in props.\n                 // props: Object...\n                 //        an object containing properties to assign to the returned object\n                 // returns:\n                 //        an Object of anonymous type\n                 // example:\n                 //    |   var foo = { bar: \"baz\" };\n                 //    |   var thinger = lang.delegate(foo, { thud: \"xyzzy\"});\n                 //    |   thinger.bar == \"baz\"; // delegated to foo\n                 //    |   foo.thud == undefined; // by definition\n                 //    |   thinger.thud == \"xyzzy\"; // mixed in from props\n                 //    |   foo.bar = \"thonk\";\n                 //    |   thinger.bar == \"thonk\"; // still delegated to foo's bar\n                 },\n                 =====</p>", "src": "can/util/dojo/dojo-1.8.1.js", "line": 12477})