c({"name": "dojo.fromJson.before", "type": "property", "parent": "dojo.fromJson", "body": "", "description": "<p>=====\n             after = function(target, methodName, advice, receiveArguments){\n             // summary:\n             //        The \"after\" export of the aspect module is a function that can be used to attach\n             //        \"after\" advice to a method. This function will be executed after the original method\n             //        is executed. By default the function will be called with a single argument, the return\n             //        value of the original method, or the the return value of the last executed advice (if a previous one exists).\n             //        The fourth (optional) argument can be set to true to so the function receives the original\n             //        arguments (from when the original method was called) rather than the return value.\n             //        If there are multiple \"after\" advisors, they are executed in the order they were registered.\n             // target: Object\n             //        This is the target object\n             // methodName: String\n             //        This is the name of the method to attach to.\n             // advice: Function\n             //        This is function to be called after the original method\n             // receiveArguments: Boolean?\n             //        If this is set to true, the advice function receives the original arguments (from when the original mehtod\n             //        was called) rather than the return value of the original/previous method.\n             // returns:\n             //        A signal object that can be used to cancel the advice. If remove() is called on this signal object, it will\n             //        stop the advice function from being executed.\n             };\n             =====</p>", "src": "can/util/dojo/dojo-1.8.1.js", "line": 17094})