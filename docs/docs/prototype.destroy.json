c({"type": "function", "name": "prototype.destroy", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [{"types": [{"type": "can.Model"}]}], "context": undefined}], "optional": true, "name": "success", "description": "<p>called if a successful destroy</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [{"types": [{"type": "XmlHttpRequest"}]}], "context": undefined}], "optional": true, "name": "error", "description": "<p>called if an unsuccessful destroy</p>"}], "parent": "prototype", "body": "", "description": "<p>Destroys the instance by calling \n[Can.Model.destroy] with the id of the instance.</p>\n\n<pre><code>recipe.destroy(success, error);\n</code></pre>\n\n<p>This triggers \"destroyed\" events on the instance and the \nModel constructor function which can be listened to with\n[can.Model::bind] and [can.Model.bind]. </p>\n\n<pre><code>Recipe = can.Model({\n  destroy : \"DELETE /services/recipes/{id}\",\n  findOne : \"/services/recipes/{id}\"\n},{})\n\nRecipe.bind(\"destroyed\", function(){\n  console.log(\"a recipe destroyed\");    \n});\n\n// get a recipe\nRecipe.findOne({id: 5}, function(recipe){\n  recipe.bind(\"destroyed\", function(){\n    console.log(\"this recipe destroyed\")    \n  })\n  recipe.destroy();\n})\n</code></pre>", "returns": {"types": [{"type": "can.Deferred"}], "description": "<p>a deferred that resolves with the destroyed instance</p>"}, "src": "can/model/model.js", "line": 958})