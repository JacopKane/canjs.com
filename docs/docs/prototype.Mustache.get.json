c({"type": "function", "name": "prototype.Mustache.get", "params": [{"types": [{"type": "String"}], "name": "ref", "description": "<p>The reference to check for on the obj/context.</p>"}, {"name": "contexts", "types": [{"type": "*"}]}, {"types": [{"type": "Boolean"}], "optional": true, "name": "isHelper", "description": "<p>Whether the reference is a helper.</p>"}, {"name": "isArgument", "types": [{"type": "*"}]}, {"types": [{"type": "Object"}], "name": "obj", "description": "<p>The object to use for checking for a reference.</p>"}, {"types": [{"type": "Object"}], "name": "context", "description": "<p>The context to use for checking for a reference if it doesn't exist in the object.</p>"}], "parent": "prototype", "body": "", "description": "<p>Resolves a reference for a given object (and then a context if that fails).\nobj = this\ncontext = { a: true }\nref = 'a.b.c'\n    => obj.a.b.c || context.a.b.c || ''</p>\n\n<p>This implements the following Mustache specs:\n    Deeply Nested Contexts\nAll elements on the context stack should be accessible.\n    {{#bool}}B {{#bool}}C{{/bool}} D{{/bool}}\n    { bool: true }\n    => \"B C D\"\n    Basic Context Miss Interpolation\n    Failed context lookups should default to empty strings.\n     {{cannot}}\n    => \"\"\n    Dotted Names - Broken Chains\n    Any falsey value prior to the last part of the name should yield ''.\n    {{a.b.c}}\n    { a: { d: 1 } }\n    => \"\"</p>", "hide": true, "src": "can/view/mustache/mustache.js", "line": 725})