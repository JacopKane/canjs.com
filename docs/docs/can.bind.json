c({"body": "<p><code>can.bind(eventName, handler)</code> binds a callback handler\non an object for a given event.  It works on:</p>\n\n<ul>\n<li>HTML elements and the window</li>\n<li>Objects</li>\n<li>Objects with bind / unbind methods</li>\n</ul>\n\n<p>The idea is that bind can be used on anything that produces events\nand it will figure out the appropriate way to \nbind to it.  Typically, <code>can.bind</code> is only used internally to\nCanJS; however, if you are making libraries or extensions, use\n<code>can.bind</code> to listen to events independent of the underlying library.</p>\n\n<p><strong>Binding to an object</strong></p>\n\n<pre><code>var obj = {};\ncan.bind.call(obj,\"something\", function(ev, arg1, arg){\n  arg1 // 1\n  arg2 // 2\n})\ncan.trigger(obj,\"something\",[1,2])\n</code></pre>\n\n<p><strong>Binding to an HTMLElement</strong></p>\n\n<pre><code>var el = document.getElementById('foo')\ncan.bind.call(el, \"click\", function(ev){\n  this // el\n})\n</code></pre>", "description": "<p>Listen for events on an object. </p>", "title": "", "name": "can.bind", "type": "function", "parent": "can.util", "signatures": [{"code": "can.bind.call(target, eventName, handler)", "description": "", "params": [{"types": [{"type": "Object"}], "name": "target", "description": "<p>The object that emits events.</p>"}, {"types": [{"type": "String"}], "name": "eventName", "description": "<p>The name of the event to listen for.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "handler", "description": "<p>The function to execute when the event occurs.</p>"}], "returns": {"types": [{"type": "Object"}], "description": "<p>The <strong>target</strong>.</p>"}}], "comment": " ", "src": "can/util/can.js", "line": 177})