c({"type": "function", "name": "can.compute.bind", "parent": "can.compute", "body": "", "description": "<p>Bind an event handler to a compute. </p>", "title": "bind", "signatures": [{"code": "bind(eventType, handler)", "description": "", "params": [{"types": [{"type": "String"}], "name": "eventType", "description": "<p>The event to bind this handler to.\nThe only event type that computes emit is <em>change</em>.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [{"types": [{"type": "Object", "options": [{"name": "Object"}]}]}, {"types": [{"type": "Object", "options": [{"name": "*"}]}]}, {"types": [{"type": "Object", "options": [{"name": "*"}]}]}], "context": undefined}], "name": "handler", "description": "<p>The handler to call when the event happens.\nThe handler should have three parameters:\n- <em>event</em> is the event object.\n- <em>newVal</em> is the newly-computed value of the compute.\n- <em>oldVal</em> is the value of the compute before it changed.</p>\n\n<p><code>bind</code> lets you listen to a compute to know when it changes. It works just like\ncan.Observe's <code>[can.Observe.prototype.bind bind]</code>:</p>\n\n<pre>var tally = can.compute(0);\ntally.bind('change', function(ev, newVal, oldVal) {\n    console.log('The tally is now at ' + newVal + '.');\n});\n\ntally(tally() + 5); // The log reads:\n                    // 'The tally is now at 5.'</pre>"}]}], "src": "can/observe/compute/compute.js", "line": 327})