c({"name": "shift", "type": "function", "parent": "can.Observe.List.prototype", "body": "", "description": "<p>Remove en element from the front of a list. </p>", "title": "", "signatures": [{"code": "shift()", "description": "<p><code>shift</code> removes an element from the beginning of a List.</p>", "params": [], "returns": {"types": [{"type": "*"}], "description": "<p>the element just shifted off the List, or <code>undefined</code> if the List is empty</p>\n\n<p><code>shift</code> is the opposite action from <code>[can.Observe.List.unshift unshift]</code>:</p>\n\n<pre>var list = new can.Observe.List(['Alice']);\n\nlist.unshift('Bob', 'Eve');\nlist.attr(); // ['Bob', 'Eve', 'Alice']\n\nlist.shift(); // 'Bob'\nlist.shift(); // 'Eve'\nlist.shift(); // 'Alice'\nlist.shift(); // undefined</pre>\n\n<h2>Events</h2>\n\n<p><code>pop</code> causes <em>change</em>, <em>remove</em>, and <em>length</em> events to be fired if the List is not empty\nwhen it is called.</p>\n\n<h2>See also</h2>\n\n<p><code>shift</code> has a counterpart in [can.Observe.List.unshift unshift], or you may be\nlooking for [can.Observe.List.push push] and its counterpart [can.Observe.List.pop pop].</p>"}}], "src": "can/observe/observe.js", "line": 1686})