c({"name": "unshift", "type": "function", "parent": "can/observe/sort/sort.js", "body": "", "description": "<p>Add items to the start of the list.  This is very similar to\n[can.Observe.List::push].  Example:</p>\n\n<pre><code>var l = new can.Observe.List([\"a\",\"b\"]);\nl.unshift(1,2,3) //-&gt; 5\nl.attr() //-&gt; [1,2,3,\"a\",\"b\"]\n</code></pre>", "title": "", "signatures": [{"code": "unshift(...elements)", "description": "<p><code>unshift</code> adds elements onto the beginning of a List.</p>", "params": [{"types": [{"type": "*"}], "name": "elements", "description": "<p>the elements to add to the List</p>"}], "returns": {"types": [{"type": "Number"}], "description": "<p>the new length of the List</p>\n\n<p><code>unshift</code> adds elements to the front of the list in bulk in the order specified:</p>\n\n<pre>var list = new can.Observe.List(['Alice']);\n\nlist.unshift('Bob', 'Eve');\nlist.attr(); // ['Bob', 'Eve', 'Alice']</pre>\n\n<p>If you have an array you want to concatenate to the beginning\nof the List, you can use <code>apply</code>:</p>\n\n<pre>var names = ['Bob', 'Eve'],\n    list = new can.Observe.List(['Alice']);\n\nlist.push.apply(list, names);\nlist.attr(); // ['Bob', 'Eve', 'Alice']</pre>\n\n<h2>Events</h2>\n\n<p><code>unshift</code> causes <em>change</em>, <em>add</em>, and <em>length</em> events to be fired.</p>\n\n<h2>See also</h2>\n\n<p><code>unshift</code> has a counterpart in [can.Observe.List.shift shift], or you may be\nlooking for [can.Observe.List.push push] and its counterpart [can.Observe.List.pop pop].</p>"}}], "src": "can/observe/observe.js", "line": 1574, "params": [{"variable": true, "types": [{"type": "*"}], "optional": true, "name": "items", "description": "<p>items to add to the start of the list.</p>"}], "returns": {"types": [{"type": "Number"}], "description": "<p>the length of the array.</p>"}})