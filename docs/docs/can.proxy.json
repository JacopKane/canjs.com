c({"body": "<p><code>can.proxy(fn, context)</code> accepts a function and returns a \nnew one that will always have the context from which it was \ncalled.  This works similar to [http://api.jquery.com/jQuery.proxy/ jQuery.proxy].</p>\n\n<pre><code> var func = can.proxy(function(one){\n   return this.a + one\n }, {a: \"b\"}); \n func(\"two\") //-&gt; \"btwo\" \n</code></pre>", "description": "<p>Bind a function to its context. </p>", "title": "", "name": "can.proxy", "type": "function", "parent": "can.util", "signatures": [{"code": "can.proxy(fn, context)", "description": "", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "fn", "description": "<p>The function to bind to a context.</p>"}, {"types": [{"type": "Object"}], "name": "context", "description": "<p>The context to bind the function to.</p>"}], "returns": {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "description": "<p>A function that calls <strong>fn</strong> in the context of <strong>context</strong>.</p>"}}], "comment": " ", "src": "can/util/can.js", "line": 141})