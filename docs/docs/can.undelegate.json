c({"body": "", "description": "<p>Stop listening for events from the children of an element. </p>", "title": "", "name": "can.undelegate", "type": "function", "parent": "can.util", "signatures": [{"code": "can.undelegate.call(element, selector, eventName, handler)", "description": "", "params": [{"types": [{"type": "HTMLElement"}], "name": "element", "description": "<p>The HTML element to unbind from.</p>"}, {"types": [{"type": "String"}], "name": "selector", "description": "<p>A selector for delegating downward.</p>"}, {"types": [{"type": "String"}], "name": "eventName", "description": "<p>The name of the event to listen for.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "handler", "description": "<p>The function that was bound.</p>"}], "returns": {"types": [{"type": "Object"}], "description": "<p>The <strong>element</strong>.</p>\n\n<p><code>can.undelegate(selector, eventName, handler)</code> unbinds a delegate handler\non an object for a given event.  It works on:</p>\n\n<ul>\n<li>HTML elements and the window</li>\n</ul>\n\n<p>The idea is that undelegate can be used on anything that produces delegate events\nand it will figure out the appropriate way to \nbind to it.  Typically, <code>can.undelegate</code> is only used internally to\nCanJS; however, if you are making libraries or extensions, use\n<code>can.undelegate</code> to listen to events independent of the underlying library.</p>\n\n<p><strong>Delegate/undelegate binding to an HTMLElement</strong></p>\n\n<pre><code>var el = document.getElementById('foo'),\n  handler = function(ev){\n    this // el\n  };\ncan.delegate.call(el, \".selector\", \"click\", handler)\ncan.undelegate.call(el, \".selector\", \"click\", handler)\n</code></pre>"}}], "src": "can/util/can.js", "line": 296})