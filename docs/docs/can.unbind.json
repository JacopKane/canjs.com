c({"body": "<p><code>can.unbind(eventName, handler)</code> unbinds a callback handler\nfrom an object for a given event.  It works on:</p>\n\n<ul>\n<li>HTML elements and the window</li>\n<li>Objects</li>\n<li>Objects with bind / unbind methods</li>\n</ul>\n\n<p>The idea is that unbind can be used on anything that produces events\nand it will figure out the appropriate way to \nunbind to it.  Typically, <code>can.unbind</code> is only used internally to\nCanJS; however, if you are making libraries or extensions, use\n<code>can.bind</code> to listen to events independent of the underlying library.</p>\n\n<p><strong>Binding/unbinding to an object</strong></p>\n\n<pre><code>var obj = {},\n  handler = function(ev, arg1, arg){\n    arg1 // 1\n    arg2 // 2\n  };\ncan.bind.call(obj,\"something\", handler)\ncan.trigger(obj,\"something\",[1,2])\ncan.unbind.call(obj,\"something\", handler)\n</code></pre>\n\n<p><strong>Binding/unbinding to an HTMLElement</strong></p>\n\n<pre><code>var el = document.getElementById('foo'),\n  handler = function(ev){\n    this // el\n  };\ncan.bind.call(el, \"click\", handler)\ncan.unbind.call(el, \"click\", handler)\n</code></pre>", "description": "<p>Stop listening for events on an object. </p>", "title": "", "name": "can.unbind", "type": "function", "parent": "can.util", "signatures": [{"code": "can.unbind.call(target, eventName, handler)", "description": "", "params": [{"types": [{"type": "Object"}], "name": "target", "description": "<p>The object that emits events.</p>"}, {"types": [{"type": "String"}], "name": "eventName", "description": "<p>The name of the event to listen for.</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "handler", "description": "<p>The function to unbind.</p>"}], "returns": {"types": [{"type": "Object"}], "description": "<p>The <strong>target</strong>.</p>"}}], "comment": " ", "src": "can/util/can.js", "line": 219})