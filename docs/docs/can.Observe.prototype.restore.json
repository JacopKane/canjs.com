c({"type": "function", "name": "can.Observe.prototype.restore", "parent": "backup", "body": "", "description": "<p>Restore saved values of an Observe's properties. </p>", "title": "restore", "plugin": "can/observe/backup", "signatures": [{"code": "restore([deep])", "description": "", "params": [{"types": [{"type": "bool"}], "optional": true, "name": "deep", "defaultValue": "false", "description": "<p>whether to restore properties in nested Observes</p>"}], "returns": {"types": [{"type": "can.Observe"}], "description": "<p>The Observe, for chaining.</p>\n\n<p><code>restore</code> sets the properties of an Observe back to what they were the last time \n[can.Observe.prototype.backup backup] was called. If <em>deep</em> is <code>true</code>,\n<code>restore</code> will also restore the properties of nested Observes.</p>\n\n<p><code>restore</code> will not remove properties that were added since the last backup, but it\nwill re-add properties that have been removed.</p>\n\n<pre>var recipe = new can.Observe({\n  title: 'Pancake Mix',\n  yields: '3 batches',\n  ingredients: [{\n    ingredient: 'flour',\n    quantity: '6 cups'\n  },{\n    ingredient: 'baking soda',\n    quantity: '1 1/2 teaspoons'\n  },{\n    ingredient: 'baking powder',\n    quantity: '3 teaspoons'\n  },{\n    ingredient: 'salt',\n    quantity: '1 tablespoon'\n  },{\n    ingredient: 'sugar',\n    quantity: '2 tablespoons'\n  }]\n});\n\nrecipe.backup();\n\nrecipe.attr('title', 'Flapjack Mix');\nrecipe.restore();\nrecipe.attr('title'); // 'Pancake Mix'\n\nrecipe.attr('ingredients.0.quantity', '7 cups');\nrecipe.restore();\nrecipe.attr('ingredients.0.quantity'); // '7 cups'\nrecipe.restore(true);\nrecipe.attr('ingredients.0.quantity'); // '6 cups'</pre>\n\n<h2>Events</h2>\n\n<p>When <code>restore</code> sets values or re-adds properties, the same events will be fired (including\n<em>change</em>, <em>add</em>, and <em>set</em>) as if the values of the properties had been set using <code>[can.Observe.attr attr]</code>.</p>"}}], "src": "can/observe/backup/backup.js", "line": 128})