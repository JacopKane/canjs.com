c({"type": "function", "name": "forEach", "parent": "can.Observe.List.prototype", "body": "", "description": "<p>Call a function for each element of a List. </p>", "title": "", "signatures": [{"code": "forEach(callback[, thisArg])", "description": "<p><code>forEach</code> calls a callback for each element in the List.</p>", "params": [{"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [{"types": [{"type": "element"}]}, {"types": [{"type": "index"}]}, {"types": [{"type": "list"}]}], "context": undefined}], "name": "callback", "description": "<p>a function to call with each element of the List\nThe three parameters that <em>callback</em> gets passed are <em>element</em>, the element at <em>index</em>, <em>index</em> the\ncurrent element of the list, and <em>list</em> the List the elements are coming from.</p>"}, {"types": [{"type": "Object"}], "optional": true, "name": "thisArg", "description": "<p>the object to use as <code>this</code> inside the callback</p>\n\n<pre>var list = new can.Observe.List([1, 2, 3]);\nlist.forEach(function(element, index, list) {\n    list.attr(index, element * element);\n});\nlist.attr(); // [1, 4, 9]</pre>"}]}], "src": "can/observe/observe.js", "line": 1882})