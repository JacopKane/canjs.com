c({"type": "function", "name": "same", "params": [{"types": [{"type": "Object"}], "name": "a", "description": "<p>an object to compare</p>"}, {"types": [{"type": "Object"}], "name": "b", "description": "<p>an object to compare</p>"}, {"types": [{"type": "Object"}], "optional": true, "name": "compares", "description": "<p>an object that indicates how to \ncompare specific properties. \nTypically this is a name / value pair</p>\n\n<pre><code>can.Object.same({name: \"Justin\"},{name: \"JUSTIN\"},{name: \"i\"})\n</code></pre>\n\n<p>There are two compare functions that you can specify with a string:</p>\n\n<ul>\n<li>'i' - ignores case</li>\n<li>null - ignores this property</li>\n</ul>"}, {"name": "aParent", "types": [{"type": "*"}]}, {"name": "bParent", "types": [{"type": "*"}]}, {"types": [{"type": "Object"}], "optional": true, "name": "deep", "description": "<p>used internally</p>"}], "parent": "can/util/object/object.js", "body": "", "description": "<p>Returns if two objects are the same.  It takes an optional compares object that\ncan be used to make comparisons.</p>\n\n<p>This function does not work with objects that create circular references.</p>\n\n<h2>Examples</h2>\n\n<pre><code>can.Object.same({name: \"Justin\"},\n              {name: \"JUSTIN\"}) //-&gt; false\n\n// ignore the name property\ncan.Object.same({name: \"Brian\"},\n              {name: \"JUSTIN\"},\n              {name: null})      //-&gt; true\n\n// ignore case\ncan.Object.same({name: \"Justin\"},\n              {name: \"JUSTIN\"},\n              {name: \"i\"})      //-&gt; true\n\n// deep rule\ncan.Object.same({ person : { name: \"Justin\" } },\n              { person : { name: \"JUSTIN\" } },\n              { person : { name: \"i\"      } }) //-&gt; true\n\n// supplied compare function\ncan.Object.same({age: \"Thirty\"},\n              {age: 30},\n              {age: function( a, b ){\n                      if( a == \"Thirty\" ) { \n                        a = 30\n                      }\n                      if( b == \"Thirty\" ) {\n                        b = 30\n                      }\n                      return a === b;\n                    }})      //-&gt; true\n</code></pre>", "title": "", "src": "can/util/object/object.js", "line": 56})