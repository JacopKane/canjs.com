c({"type": "function", "body": "", "description": "<p>Extending the original [http://api.jquery.com/html/ jQuery().html()]\nto render [can.view] templates as the content of each matched element.</p>\n\n<pre><code>$('#test').html('path/to/template.ejs', { name : 'canjs' });\n</code></pre>", "title": "", "name": "jQuery.fn.html", "parent": "can.view.modifiers", "params": [{"types": [{"type": "String"}, {"type": "Object"}, {"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "name": "content", "description": "<p>A template filename or the id of a view script tag \nor a DOM element, array of elements, HTML string, or can object.</p>"}, {"types": [{"type": "Object"}], "optional": true, "name": "data", "description": "<p>The data to render the view with.\nIf rendering a view template this parameter always has to be present\n(use the empty object initializer {} for no data).</p>"}, {"types": [{"type": "function", "constructs": undefined, "returns": {"types": [{"type": "undefined"}]}, "params": [], "context": undefined}], "optional": true, "name": "callback", "description": "<p>A success callback to load the view asynchronously</p>"}], "returns": {"types": [{"type": "jQuery"}, {"type": "can.Deferred"}], "description": "<p>The jQuery object or a [can.Deferred] if a deferred has\nbeen passed in data.</p>"}, "src": "can/view/modifiers/modifiers.js", "line": 248})