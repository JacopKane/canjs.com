c({"type": "function", "name": "slice", "parent": "can.Observe.List.prototype", "body": "", "description": "<p>Make a copy of a part of a List. </p>", "title": "", "signatures": [{"code": "slice([start[, end]])", "description": "<p><code>slice</code> creates a copy of a portion of the List.</p>", "params": [{"types": [{"type": "Number"}], "optional": true, "name": "start", "defaultValue": "0", "description": "<p>the index to start copying from</p>"}, {"types": [{"type": "Number"}], "optional": true, "name": "end", "description": "<p>the first index not to include in the copy\nIf <em>end</em> is not supplied, <code>slice</code> will copy until the end of the list.</p>"}], "returns": {"types": [{"type": "can.Observe.List"}], "description": "<p>a new <code>can.Observe.List</code> with the extracted elements</p>\n\n<pre>var list = new can.Observe.List(['Alice', 'Bob', 'Charlie', 'Daniel', 'Eve']);\nvar newList = list.slice(1, 4);\nnewList.attr(); // ['Bob', 'Charlie', 'Daniel']</pre>\n\n<p><code>slice</code> is the simplest way to copy a List:</p>\n\n<pre>var list = new can.Observe.List(['Alice', 'Bob', 'Eve']);\nvar copy = list.slice();\n\ncopy.attr();   // ['Alice', 'Bob', 'Eve']\nlist === copy; // false</pre>"}}], "src": "can/observe/observe.js", "line": 1817})