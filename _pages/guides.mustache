<div class="container api">

	<nav class="sidebar">
		<div class="search">
			<input type="text"/>
		</div>
		<ul class="api">
			<li class="active"><a href="#construct">Get Started</a>
				<ul>
					<li><a href="#">can.Construct</a>
						<ul>
							<li class="active"><a href="#">init</a></li>
						</ul>
					</li>
					<li><a href="#">can.Observe</a></li>
					<li><a href="#">can.Model</a></li>
					<li><a href="#">can.view</a></li>
					<li><a href="#">can.EJS</a></li>
					<li><a href="#">can.Mustache</a></li>
					<li><a href="#">can.Control</a></li>
					<li><a href="#">can.route</a></li>
					<li><a href="#">Utilities</a></li>
				</ul>
			</li>

			<li><a href="#apiguide">API Guide</a></li>
			<li><a href="#model">Developing CanJS</a></li>
			<li><a href="#recipes">Examples</a></li>
			<li><a href="#docs">Documentation</a></li>
			<li><a href="#annotated">Annotated Source</a></li>
		</ul>
	</nav>
	<!--.sidebar -->

	<article class="content">

		<h1>Learn CanJS</h1>

		<p>Our goal is to make learning CanJS as easy as possible. There are a number of resources to use. Click a todo
			to edit it. Use the browser’s forward and <a href="">back buttons</a> to change what todo is being edited.
		</p>

		<iframe width="100%" height="300" src="http://jsfiddle.net/5zpFz/90/embedded/" allowfullscreen="allowfullscreen"
		        frameborder="0"></iframe>

		<h1>can.Construct</h1>
		<code>can.Construct( [classProperties,] [prototypeProperties] )</code>

		<p>Constructor functions made with can.Construct are used to create objects with shared properties. It’s used by
			both can.Control and can.Model.</p>

		<p>To create a constructor function of your own, call can.Construct with the:</p>
		<ul>
			<li>classProperties that are attached directly to the constructor, and</li>
			<li>instance prototypeProperties.</li>
		</ul>
		<p><strong>can.Construct</strong> sets up the prototype chain so subclasses can be further extended and
			sub-classed as far as you like:</p>
			<pre>
			<code>
				var Todo = can.Construct({
				init: function(){},

				author: function() { ... },

				coordinates: function() { ... },

				allowedToEdit: function( account ) {
				return true;
				}
				});

				var PrivateTodo = Todo({
				allowedToEdit: function( account ) {
				return account.owns( this );
				}
				});
			</code>
			</pre>

		<p>If only one set of properties is passed to can.Construct, it’s assumed to be the prototype properties.</p>

		<h2>init</h2>

		<p>When a constructor is called with the new keyword, can.Construct creates the instance and calls
			can.Construct.prototype.init with the arguments passed to <code>new Constructor(…)</code>.</p>

			<pre>
			<code>
				var Todo = can.Construct({
				init: function( text ) {
				this.text = text
				},
				read: function() {
				console.log( this.text );
				}
				})

				var todo = new Todo( 'Hello World' );
				todo.read()
			</code>
			</pre>

		<hr/>

	</article>
	<!-- .content -->
</div><!-- .container -->